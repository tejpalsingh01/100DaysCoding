########### Problem Statement #############

📌 Day #159: Compare Version Numbers
LeetCode Problem: 165. Compare Version Numbers – Medium

🔍 Problem Statement:
Given two version numbers version1 and version2, compare them.

Each version string contains revisions separated by . (dot). Each revision is an integer (ignoring leading zeros).
Return:

1 if version1 > version2

-1 if version1 < version2

0 if they are equal

🧠 Approach: Two-Pointer or Parallel Iteration

Key Steps:

Split both version strings by "." to get revision parts.

Convert each part into an integer to ignore leading zeros.

Compare revisions one by one from both versions:

If unequal, return the result based on comparison.

If one version has more parts, treat missing revisions as 0.

If all parts are equal, return 0.

💡 Edge Handling:

"1.0" vs "1" → should be equal.

"1.01" vs "1.001" → both are 1.1.

📈 Time Complexity: O(n) – where n is the length of the longer version string.
🧵 Space Complexity: O(n) – for storing split parts.

#Day159 #LeetCode #VersionControl #StringHandling #CompareVersions #TechInterview #DSA #CodingChallenge

############ Solution #################
/**
 * @param {string} version1
 * @param {string} version2
 * @return {number}
 */
var compareVersion = function(version1, version2) {
    let v1 = version1.split('.').map(Number);
    let v2 = version2.split('.').map(Number);


    let len  = Math.max(v1.length, v2.length);

    for(let i = 0; i < len; i++ ){
        let num1 = i < v1.length ? v1[i] : 0;
        let num2 = i < v2.length ? v2[i] : 0;

        if(num1 > num2) return 1;
        if(num1 < num2) return -1; 
    }

    return 0;
};

#######################################
