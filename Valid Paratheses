########## Problem Statement ##############

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true

 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.


############Solution ###########

class Solution {
    public boolean isValid(String s) {
        // Create a stack to store open brackets
        Stack<Character> stack =new Stack<>();

        //Iterate through the character int the string 
        for(char c: s.toCharArray()){
            //if it's an open bracket, push it onto the stack 
            if(c== '('  || c=='{'|| c == '['){
                stack.push(c);

            }else {
                //if its a closing bracket, check the stack 
                if(stack.isEmpty()){
                    return false;// No matching opening bracket
                }
                char top = stack.pop(); // Pop the top element 

                // Check for matching brackets
                if((c==')'&&top!='(') ||
                (c=='}'&& top!='{')  ||
                (c==']'&& top!= '[')){
                    return false;
                }
            }
        }
        //if the stack is empty, all brackets were matched 
        return stack.isEmpty();
    }
}
