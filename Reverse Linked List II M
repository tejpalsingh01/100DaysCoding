############ Problem Statment #################
92. Reverse Linked List II

Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

 

Example 1:


Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]
Example 2:

Input: head = [5], left = 1, right = 1
Output: [5]
 

Constraints:

The number of nodes in the list is n.
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n

############# Solution ###########
var reverseBetween = function(head, left, right) {
    if (!head || left === right) return head;

    // Create a dummy node to handle edge cases like reversing from head
    let dummy = new ListNode(0);
    dummy.next = head;
    let prev = dummy;

    // Step 1: Move `prev` to node just before `left`
    for (let i = 1; i < left; i++) {
        prev = prev.next;
    }

    // Step 2: Reverse the sublist from `left` to `right`
    let current = prev.next;
    let next = null;

    for (let i = 0; i < right - left; i++) {
        next = current.next;
        current.next = next.next;
        next.next = prev.next;
        prev.next = next;
    }

    return dummy.next;
};

############################
