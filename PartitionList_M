################ Problem Statement ##############
Partition List

Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

 

Example 1:


Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]
Example 2:

Input: head = [2,1], x = 2
Output: [1,2]
 

Constraints:

The number of nodes in the list is in the range [0, 200].
-100 <= Node.val <= 100
-200 <= x <= 200

############ solution #############
/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * @param {ListNode} head
 * @param {number} x
 * @return {ListNode}
 */
var partition = function(head, x) {
    // Create two dummy nodes to start the less and greater lists 
    let lessHead = new ListNode(0);
    let greaterHead = new ListNode(0);

    //These pointers will be used to build the two lists
    let less = lessHead;
    let greater = greaterHead;

    //Traverse the original list
    while(head !== null){
        if(head.val < x){
            less.next = head;
            less = less.next;
        } else {
            greater.next = head;
            greater = greater.next;

        }
        head = head.next;
    } 
    // End the greater list
    greater.next = null;

    //connect the less list to the greater list
    less.next = greaterHead.next;

    // Return the start of the new list
    return lessHead.next;
};

#########################################
