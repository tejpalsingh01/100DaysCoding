########### Problem Statement ######################
224. Basic Calculator

Given a string s representing a valid expression, implement a basic calculator to evaluate it, and return the result of the evaluation.

Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().

 

Example 1:

Input: s = "1 + 1"
Output: 2
Example 2:

Input: s = " 2-1 + 2 "
Output: 3
Example 3:

Input: s = "(1+(4+5+2)-3)+(6+8)"
Output: 23
 

Constraints:

1 <= s.length <= 3 * 105
s consists of digits, '+', '-', '(', ')', and ' '.
s represents a valid expression.
'+' is not used as a unary operation (i.e., "+1" and "+(2 + 3)" is invalid).
'-' could be used as a unary operation (i.e., "-1" and "-(2 + 3)" is valid).
There will be no two consecutive operators in the input.
Every number and running calculation will fit in a signed 32-bit integer.

############## Solution ####################

/**
 * @param {string} s
 * @return {number}
 */
var calculate = function(s) {
    let stack = [];
    let result = 0;
    let number = 0;
    let sign = 1; // +1 for positive, -1 for negative

    for (let i = 0; i < s.length; i++) {
        let char = s[i];

        if (!isNaN(char) && char !== ' ') {
            // digit मिल रही है, तो पूरा number बना लो
            number = number * 10 + parseInt(char);
        } else if (char === '+') {
            result += sign * number;
            number = 0;
            sign = 1;
        } else if (char === '-') {
            result += sign * number;
            number = 0;
            sign = -1;
        } else if (char === '(') {
            stack.push(result);
            stack.push(sign);
            result = 0;
            sign = 1;
        } else if (char === ')') {
            result += sign * number;
            number = 0;
            result *= stack.pop(); // pop sign
            result += stack.pop(); // pop previous result
        }
        // space होने पर कुछ नहीं करना
    }

    // अंतिम number को जोड़ें
    if (number !== 0) {
        result += sign * number;
    }

    return result;
};





#########################################
