########## problem Statement ###############
Sort List

Given the head of a linked list, return the list after sorting it in ascending order.

 

Example 1:


Input: head = [4,2,1,3]
Output: [1,2,3,4]
Example 2:


Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]
Example 3:

Input: head = []
Output: []
 

Constraints:

The number of nodes in the list is in the range [0, 5 * 104].
-105 <= Node.val <= 105
############ Solution #################
function ListNode(val, next = null) {
    this.val = val;
    this.next = next;
}

/**
 * @param {ListNode} head
 * @return {ListNode}
 */
var sortList = function(head) {
    if (!head || !head.next) return head;

    // Step 1: Find the middle of the list
    let mid = getMiddle(head);
    let right = mid.next;
    mid.next = null; // split the list

    // Step 2: Sort left and right halves
    let left = sortList(head);
    right = sortList(right);

    // Step 3: Merge the sorted halves
    return merge(left, right);
};

// 🧠 Function to find middle (slow-fast pointer)
function getMiddle(head) {
    let slow = head, fast = head.next;
    while (fast && fast.next) {
        slow = slow.next;
        fast = fast.next.next;
    }
    return slow;
}

// 🤝 Function to merge two sorted lists
function merge(l1, l2) {
    let dummy = new ListNode(0);
    let tail = dummy;

    while (l1 && l2) {
        if (l1.val <= l2.val) {
            tail.next = l1;
            l1 = l1.next;
        } else {
            tail.next = l2;
            l2 = l2.next;
        }
        tail = tail.next;
    }

    tail.next = l1 ? l1 : l2;
    return dummy.next;
}


#######################################
