############ Problem Satement ###########

Subsets

Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

########## Solution ##########
/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var subsets = function(nums) {
    let result = [];

    const backtrack = (index, path) => {
        result.push([...path]); // Store a copy of the subset

        for(let i = index; i< nums.length; i++){
            path.push(nums[i]); //Include nums[i]
            backtrack(i+1,path); //Move to next index
            path.pop(); // Remove last element to backtrack
        }
    };

    backtrack(0,[]);
    return result;
};

###########################
