################## Problem Statement #################
Balanced Binary Tree

Given a binary tree, determine if it is height-balanced.


Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: true
Example 2:


Input: root = [1,2,2,3,3,null,null,4,4]
Output: false
Example 3:

Input: root = []
Output: true
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-104 <= Node.val <= 104

############ Solution ###########
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isBalanced = function(root) {
    function check(node){
        if(node === null) return 0; // height of null node is zero

        let left = check(node.left); //height of left subtree
        if(left === -1) return -1; //if left is unbalanced than return -1

        let right = check(node.right); // height of right subtree
        if(right === -1) return -1; //if right is unbalanced return -1

        if(Math.abs(left - right) > 1) return -1;// if difference of height is greater than -1
        return Math.max(left, right) +1; // return height
    }

    return check(root) !==-1;// if not return -1 then the tree is a balanced tree
};

###############################
