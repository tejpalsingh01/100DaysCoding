################# Problem Statement ################
Swap Nodes in Pairs
Given a linked list, swap every two adjacent nodes and return its head. You must solve the problem without modifying the values in the list's nodes (i.e., only nodes themselves may be changed.)

Example 1:

Input: head = [1,2,3,4]

Output: [2,1,4,3]

Explanation:



Example 2:

Input: head = []

Output: []

Example 3:

Input: head = [1]

Output: [1]

Example 4:

Input: head = [1,2,3]

Output: [2,1,3]

 

Constraints:

The number of nodes in the list is in the range [0, 100].

################# Solution ##################

var swapPairs = function(head) {
    if (!head || !head.next) return head; // If list is empty or has only one node, return as is
    
    let dummy = new ListNode(0); // Dummy node to handle edge cases
    dummy.next = head;
    let prev = dummy;
    
    while (head && head.next) {
        let first = head;
        let second = head.next;
        
        // Swapping
        prev.next = second;
        first.next = second.next;
        second.next = first;
        
        // Move pointers forward
        prev = first;
        head = first.next;
    }
    
    return dummy.next;
};

#######################################

var swapPairs = function(head) {
    if (!head || !head.next) return head; // If list is empty or has only one node, return as is
    
    let dummy = new ListNode(0); // Dummy node to handle edge cases
    dummy.next = head;
    let prev = dummy;
    
    while (head && head.next) {
        let first = head;
        let second = head.next;
        
        // Swapping
        prev.next = second;
        first.next = second.next;
        second.next = first;
        
        // Move pointers forward
        prev = first;
        head = first.next;
    }
    
    return dummy.next;
};
#############################################


