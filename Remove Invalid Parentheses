############  Problem Statement ###################
301. Remove Invalid Parentheses
Hard
Topics
premium lock icon
Companies
Hint
Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.

Return a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.

Example 1:

Input: s = "()())()"
Output: ["(())()","()()()"]
Example 2:

Input: s = "(a)())()"
Output: ["(a())()","(a)()()"]
Example 3:

Input: s = ")("
Output: [""]
 

Constraints:

1 <= s.length <= 25
s consists of lowercase English letters and parentheses '(' and ')'.
There will be at most 20 parentheses in s.

################# Solution ########################
/**
 * @param {string} s
 * @return {string[]}
 */
var removeInvalidParentheses = function(s) {
    const result = new Set();
    const visited = new Set();
    const queue = [];
    
    queue.push(s);
    visited.add(s);
    
    let found = false;
    
    const isValid = (str) => {
        let count = 0;
        for (let char of str) {
            if (char === '(') count++;
            else if (char === ')') {
                count--;
                if (count < 0) return false;
            }
        }
        return count === 0;
    };
    
    while (queue.length > 0) {
        const curr = queue.shift();
        
        if (isValid(curr)) {
            result.add(curr);
            found = true;
        }
        
        if (found) continue;
        
        for (let i = 0; i < curr.length; i++) {
            if (curr[i] !== '(' && curr[i] !== ')') continue;
            let next = curr.slice(0, i) + curr.slice(i + 1);
            if (!visited.has(next)) {
                queue.push(next);
                visited.add(next);
            }
        }
    }
    
    return [...result];
};

####################################################
