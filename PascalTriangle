###################Problem Statement ###########
In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30

################# Solution #############
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result  = new ArrayList<>();


        //Loop through the number of rows
        for(int i = 0;i<numRows;i++){
            List<Integer> row = new ArrayList<>();

            // First and last elements of the row are always 1
            row.add(1);

            //Compute intermediate values 
            for(int j = 1;j<i; j++){
                int val  = result.get(i-1).get(j-1) + result.get(i-1).get(j);
                row.add(val);
            }
            //Last element of the row(if i>0) is always 1
            if(i>0){
                row.add(1);
            }

            //Add the row to the result 
            result.add(row);
        }
        return result;
    }
}

##########################################
