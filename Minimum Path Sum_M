############# Problem Statement #############

Minimum Path Sum
Medium
Topics
Companies
Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 200

################ Solution ################3
/**
 * @param {number[][]} grid
 * @return {number}
 */
var minPathSum = function(grid) {
    let m = grid.length;
    let n= grid[0].length;

    // Iterate through the grid and update the minimum path sum at each cell
    for(let i = 0; i<m;i++){
        for(let j = 0; j<n;j++){
            if(i===0 && j === 0) continue; // Skip the first cell

            if(i === 0){
                // First row: Can only come from the left 
                grid[i][j] += grid[i][j-1];
            }else if(j === 0){
                // First column : Can only come from the left 
                grid[i][j] += grid[i - 1][j];
            }else {
                //Otherwise, take the minimum path sum from top or left
                grid[i][j] += Math.min(grid[i-1][j], grid[i][j-1]);
            }
        }
    }

    return grid[m-1][n-1]; // Return the bottom-right cell value
};

#####################################################
