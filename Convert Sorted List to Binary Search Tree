########## Problem Statement ####################

Convert Sorted List to Binary Search Tree

Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height-balanced binary search tree.

Example 1:


Input: head = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.
Example 2:

Input: head = []
Output: []
 

Constraints:

The number of nodes in head is in the range [0, 2 * 104].
-105 <= Node.val <= 105

########## Solution ######################

/**
 * Definition for singly-linked list.
 * function ListNode(val, next) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.next = (next===undefined ? null : next)
 * }
 */
/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {ListNode} head
 * @return {TreeNode}
 */
var sortedListToBST = function(head) {
    if (!head) return null;

    // Helper function to find middle node
    const findMiddle = (head) => {
        let prev = null;
        let slow = head;
        let fast = head;

        while (fast && fast.next) {
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }

        // Disconnect left half from the mid node
        if (prev) prev.next = null;

        return slow;
    };

    if (!head.next) {
        return new TreeNode(head.val);
    }

    let mid = findMiddle(head);
    let root = new TreeNode(mid.val);

    // Left half becomes left subtree
    root.left = sortedListToBST(head !== mid ? head : null);
    // Right half becomes right subtree
    root.right = sortedListToBST(mid.next);

    return root;
};

#############################################
