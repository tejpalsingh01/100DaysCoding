#################### Problem Statement ###############
Letter Combinations of a Phone Number

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
 

Constraints:

0 <= digits.length <= 4
digits[i] is a digit in the range ['2', '9'].

###################### Solution ###############################

/**
 * @param {string} digits
 * @return {string[]}
 */
var letterCombinations = function(digits) {
    // Base case: if digits is empty, return an empty array
    if (digits.length === 0) return [];

    // Map of digits to corresponding letters
    const digitToLetters = {
        '2': ['a', 'b', 'c'],
        '3': ['d', 'e', 'f'],
        '4': ['g', 'h', 'i'],
        '5': ['j', 'k', 'l'],
        '6': ['m', 'n', 'o'],
        '7': ['p', 'q', 'r', 's'],
        '8': ['t', 'u', 'v'],
        '9': ['w', 'x', 'y', 'z']
    };

    const result = [];

    // Helper function for backtracking
    const backtrack = (index, path) => {
        // If the path length equals the digits length, add it to the result
        if (path.length === digits.length) {
            result.push(path.join(''));
            return;
        }

        // Get the letters corresponding to the current digit
        const letters = digitToLetters[digits[index]];

        // Loop through the letters and recurse
        for (let letter of letters) {
            path.push(letter); // Choose a letter
            backtrack(index + 1, path); // Move to the next digit
            path.pop(); // Backtrack
        }
    };

    backtrack(0, []); // Start backtracking from index 0
    return result;
};
#############################################################
