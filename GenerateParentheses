############## Problem Satement ################
Generate Parentheses
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

Example 1:

Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]
Example 2:

Input: n = 1
Output: ["()"]

############### Solution ########################
/**
 * @param {number} n
 * @return {string[]}
 */
var generateParenthesis = function(n) {
    const result = [];

    const backtrack = (currentString, openCount, closeCount) => {
        // Base case : If the current string's length is equal to 2*n, add it to the result
        if(currentString.length === n * 2){
            result.push(currentString);
            return;
        } 

        //Add an open parenthesis if we still have remining '(' to add
        if(openCount < n){
            backtrack(currentString + '(', openCount +1, closeCount);
        }

        //Add a close parethesis if the number of ')' is less than the number of '('
        if(closeCount < openCount) {
            backtrack(currentString + ')', openCount , closeCount +1);
        }
    };
    backtrack('',0,0); //Start with an empty string
    return result;
};

#########################################
