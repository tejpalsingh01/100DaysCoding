########### Problem Statement ##################
Count Days Without Meetings

You are given a positive integer days representing the total number of days an employee is available for work (starting from day 1). You are also given a 2D array meetings of size n where, meetings[i] = [start_i, end_i] represents the starting and ending days of meeting i (inclusive).

Return the count of days when the employee is available for work but no meetings are scheduled.

Note: The meetings may overlap.

 

Example 1:

Input: days = 10, meetings = [[5,7],[1,3],[9,10]]

Output: 2

Explanation:

There is no meeting scheduled on the 4th and 8th days.

Example 2:

Input: days = 5, meetings = [[2,4],[1,3]]

Output: 1

Explanation:

There is no meeting scheduled on the 5th day.

Example 3:

Input: days = 6, meetings = [[1,6]]

Output: 0

Explanation:

Meetings are scheduled for all working days.

 

Constraints:

1 <= days <= 109
1 <= meetings.length <= 105
meetings[i].length == 2
1 <= meetings[i][0] <= meetings[i][1] <= days

############# Solution ###########3
/**
 * @param {number} days
 * @param {number[][]} meetings
 * @return {number}
 */
var countDays = function(days, meetings) {
    let time = [];
    for (let [start, end] of meetings) {
        time.push([start, 1]);
        time.push([end + 1, 0]);
    }
    
    // Sort the time array
    time.sort((a, b) => a[0] - b[0]);
    
    // Apply Line-Sweep 1D
    let overlap = 0;
    let count = time.length > 0 ? time[0][0] - 1 : days;
    
    for (let i = 0; i < time.length - 1; i++) {
        if (time[i][1] === 0) overlap--;
        else overlap++;
        
        if (overlap === 0) {
            count += time[i + 1][0] - time[i][0];
        }
    }
    
    count += days - (time.length > 0 ? time[time.length - 1][0] - 1 : 0);
    return count;
};

#############################
