############ Problem Satement ###########
Remove Duplicates from Sorted List

Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.

 

Example 1:


Input: head = [1,1,2]
Output: [1,2]
Example 2:


Input: head = [1,1,2,3,3]
Output: [1,2,3]
 

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.
########### Solution ##########
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if (head == null || head.next == null) return head; // If the list is empty or has one node, return it as is.
        
        ListNode current = head; // Start with the head of the list.
        
        while (current != null && current.next != null) { // Traverse the list until the end.
            if (current.val == current.next.val) {
                // If the current value equals the next value, skip the next node.
                current.next = current.next.next;
            } else {
                // Otherwise, move to the next node.
                current = current.next;
            }
        }
        
        return head; // Return the modified list.
    }
}
####################################
