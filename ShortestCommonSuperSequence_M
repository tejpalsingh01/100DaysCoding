############# Problem Statement #############
Shortest Common Supersequence 

Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.

A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.

 

Example 1:

Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.
Example 2:

Input: str1 = "aaaaaaaa", str2 = "aaaaaaaa"
Output: "aaaaaaaa"
 

Constraints:

1 <= str1.length, str2.length <= 1000
str1 and str2 consist of lowercase English letters.

Constraints:

The number of nodes in the list is in the range [0, 300].
-100 <= Node.val <= 100
The list is guaranteed to be sorted in ascending order.
############ Soluion ############
/**
 * @param {string} str1
 * @param {string} str2
 * @return {string}
 */
var shortestCommonSupersequence = function(str1, str2) {
    let m = str1.length, n = str2.length;
    
    // Step 1: Compute LCS using DP
    let dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(""));
    
    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            if (str1[i - 1] === str2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1] + str1[i - 1];
            } else {
                dp[i][j] = dp[i - 1][j].length > dp[i][j - 1].length ? dp[i - 1][j] : dp[i][j - 1];
            }
        }
    }

    let lcs = dp[m][n];

    // Step 2: Construct the Shortest Common Supersequence (SCS)
    let i = 0, j = 0, res = "";
    
    for (let char of lcs) {
        while (str1[i] !== char) res += str1[i++];
        while (str2[j] !== char) res += str2[j++];
        res += char;
        i++; 
        j++;
    }
    
    // Add remaining characters from both strings
    res += str1.slice(i) + str2.slice(j);
    
    return res;
};

###############################
