######### Problem Statement ###########
Length of Longest Fibonacci Subsequence
Solved
Medium
Topics
Companies
A sequence x1, x2, ..., xn is Fibonacci-like if:

n >= 3
xi + xi+1 == xi+2 for all i + 2 <= n
Given a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.

A subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].

 

Example 1:

Input: arr = [1,2,3,4,5,6,7,8]
Output: 5
Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].
Example 2:

Input: arr = [1,3,7,11,12,14,18]
Output: 3
Explanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].
############# Solution #######
var lenLongestFibSubseq = function(arr) {
    let indexMap = new Map(); // Stores index of each number in arr
    let dp = new Map(); // Stores length of Fibonacci-like subsequence
    let maxLen = 0;
    
    // Populate index map
    for (let i = 0; i < arr.length; i++) {
        indexMap.set(arr[i], i);
    }
    
    // Iterate through all pairs
    for (let i = 0; i < arr.length; i++) {
        for (let j = 0; j < i; j++) {
            let x = arr[j];
            let y = arr[i];
            let prevIndex = indexMap.get(x + y);
            
            if (prevIndex !== undefined && prevIndex > i) {
                let len = dp.get(`${j},${i}`) || 2;
                dp.set(`${i},${prevIndex}`, len + 1);
                maxLen = Math.max(maxLen, len + 1);
            }
        }
    }
    
    return maxLen >= 3 ? maxLen : 0;
};
###########################
