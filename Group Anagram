########### Problem Statement #############
Group Anagrams

Given an array of strings strs, group the anagrams together. You can return the answer in any order.

 

Example 1:

Input: strs = ["eat","tea","tan","ate","nat","bat"]

Output: [["bat"],["nat","tan"],["ate","eat","tea"]]

Explanation:

There is no string in strs that can be rearranged to form "bat".
The strings "nat" and "tan" are anagrams as they can be rearranged to form each other.
The strings "ate", "eat", and "tea" are anagrams as they can be rearranged to form each other.
Example 2:

Input: strs = [""]

Output: [[""]]

Example 3:

Input: strs = ["a"]

Output: [["a"]]

 

Constraints:

1 <= strs.length <= 104
0 <= strs[i].length <= 100
strs[i] consists of lowercase E

############# Solution #########
/**
 * @param {string[]} strs
 * @return {string[][]}
 */
var groupAnagrams = function(strs) {
    const map = new Map();

    for (let str of strs) {
        // Sort the string to get the key
        const sorted = str.split('').sort().join('');
        
        // If the key is not in the map, initialize with an empty array
        if (!map.has(sorted)) {
            map.set(sorted, []);
        }

        // Push the original string into the corresponding group
        map.get(sorted).push(str);
    }

    // Return all grouped anagrams
    return Array.from(map.values());
};


##########################
