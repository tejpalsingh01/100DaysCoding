############### Problem Statement ############
Median of Two Sorted Arrays

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106

############## SOlution ###############

/**
 * @param {number[]} nums1
 * @param {number[]} nums2
 * @return {number}
 */
var findMedianSortedArrays = function(nums1, nums2) {
    if(nums1.length > nums2.length){
        return findMedianSortedArrays(nums2, nums1);

    }
    let m = nums1.length, n= nums2.length;
    let left = 0, right = m;

    while(left <= right){
        let i = Math.floor((left + right)/2);
        let j = Math.floor((m+n+1)/2)-i;

        let leftMax1 = i === 0? -Infinity : nums1[i - 1];
        let rightMin1 = i === m ? Infinity : nums1[i];
        let leftMax2 = j === 0 ? -Infinity : nums2[j-1];
        let rightMin2 = j === n ? Infinity : nums2[j];

        if(leftMax1 <= rightMin2 && leftMax2 <= rightMin1){
            if((m+n)% 2 === 0 ){
                return(Math.max(leftMax1 , leftMax2) + Math.min(rightMin1, rightMin2))/2.0;
            } else {
                return Math.max(leftMax1, leftMax2);
            }
        } else if(leftMax1 > rightMin2){
            right = i-1;
        }else {
            left = i+1;
        }
    }
    return 0;
};

##########################
