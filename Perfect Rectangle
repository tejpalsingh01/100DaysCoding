############### Problem Statement ###########
391. Perfect Rectangle
Solved
Hard
Topics
premium lock icon
Companies
Given an array rectangles where rectangles[i] = [xi, yi, ai, bi] represents an axis-aligned rectangle. The bottom-left point of the rectangle is (xi, yi) and the top-right point of it is (ai, bi).

Return true if all the rectangles together form an exact cover of a rectangular region.

 

Example 1:


Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]
Output: true
Explanation: All 5 rectangles together form an exact cover of a rectangular region.
Example 2:


Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]
Output: false
Explanation: Because there is a gap between the two rectangular regions.
Example 3:


Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]
Output: false
Explanation: Because two of the rectangles overlap with each other.
 

Constraints:

1 <= rectangles.length <= 2 * 104
rectangles[i].length == 4
-105 <= xi < ai <= 105
-105 <= yi < bi <= 105

############# Solution ##############
/**
 * @param {number[][]} rectangles
 * @return {boolean}
 */
var isRectangleCover = function(rectangles) {
    const pointSet = new Set();
    let minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
    let actualArea = 0;

    for (let [x1, y1, x2, y2] of rectangles) {
        // Calculate total area
        actualArea += (x2 - x1) * (y2 - y1);

        // Update bounding rectangle
        minX = Math.min(minX, x1);
        minY = Math.min(minY, y1);
        maxX = Math.max(maxX, x2); // ✅ FIXED
        maxY = Math.max(maxY, y2); // ✅ FIXED

        // Add/remove corners
        const addOrRemove = (x, y) => {
            const key = `${x},${y}`; // ✅ FIXED
            if (pointSet.has(key)) {
                pointSet.delete(key);
            } else {
                pointSet.add(key);
            }
        };

        // ✅ Call for all 4 corners
        addOrRemove(x1, y1);
        addOrRemove(x1, y2);
        addOrRemove(x2, y1);
        addOrRemove(x2, y2);
    }

    // Final expected corners
    const expectedCorners = new Set([
        `${minX},${minY}`,
        `${minX},${maxY}`,
        `${maxX},${minY}`,
        `${maxX},${maxY}`,
    ]);

    // ✅ Check 1: Exactly 4 corners must remain
    if (pointSet.size !== 4) return false;

    // ✅ Check 2: They must match the outer rectangle corners
    for (const corner of expectedCorners) {
        if (!pointSet.has(corner)) return false;
    }

    // ✅ Check 3: Area match
    const expectedArea = (maxX - minX) * (maxY - minY);
    return actualArea === expectedArea;
};



######################################
