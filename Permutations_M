############## Problem Statement ###########
Permutations

Medium

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

########## Solution ###############
/**
 * @param {number[]} nums
 * @return {number[][]}
 */
var permute = function(nums) {
    const result = [];

    const backtrack = (path, used) => {
        if(path.length === nums.length){
            result.push([...path]); // make a copy of the current permutation
            return;
        }

        for(let i = 0; i< nums.length; i++){
            if(used[i]) continue;

            path.push(nums[i]);
            used[i] = true;
            backtrack(path,used);
            path.pop();  // undo the choice
            used[i] = false; // mark it as unused again
        }
    };
    backtrack([], Array(nums.length).fill(false));
    return result;
};

################################
