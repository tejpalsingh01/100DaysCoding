############# Problem Statement ############# 
Count of Range Sum
Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper] inclusive.

Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j inclusive, where i <= j.

 

Example 1:

Input: nums = [-2,5,-1], lower = -2, upper = 2
Output: 3
Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.
Example 2:

Input: nums = [0], lower = 0, upper = 0
Output: 1
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1
-105 <= lower <= upper <= 105
The answer is guaranteed to fit in a 32-bit integer.

############ Solution ############
var countRangeSum = function(nums, lower, upper) {
    const prefix = [0];
    for (let num of nums) {
        prefix.push(prefix[prefix.length - 1] + num);
    }

    function mergeSort(start, end) {
        if (end - start <= 1) return 0;

        const mid = Math.floor((start + end) / 2);
        let count = mergeSort(start, mid) + mergeSort(mid, end);

        let j = mid, k = mid, r = mid;
        const temp = [];

        for (let i = start, t = 0; i < mid; i++, t++) {
            // Move k to the first index such that prefix[k] - prefix[i] >= lower
            while (k < end && prefix[k] - prefix[i] < lower) k++;
            // Move j to the first index such that prefix[j] - prefix[i] > upper
            while (j < end && prefix[j] - prefix[i] <= upper) j++;
            count += j - k;

            // Merge sort part - keep temp array sorted
            while (r < end && prefix[r] < prefix[i]) temp.push(prefix[r++]);
            temp.push(prefix[i]);
        }

        // Copy back the sorted elements
        for (let i = 0; i < r - start; i++) {
            prefix[start + i] = temp[i];
        }

        return count;
    }

    return mergeSort(0, prefix.length);
};

################################
