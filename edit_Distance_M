################# Problem Statement ####################
Edit Distance

Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 

Constraints:

0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.
################### Solution ###################

/**
 * @param {string} word1
 * @param {string} word2
 * @return {number}
 */
var minDistance = function(word1, word2) {
    const m = word1.length;
    const n = word2.length;

    // Create a DP array of size (m+1) x (n+1)
    const dp = Array.from({ length: m + 1 }, () => Array(n + 1).fill(0));

    // Fill the base cases
    for (let i = 0; i <= m; i++) {
        dp[i][0] = i; // Minimum operations to convert word1[0..i] to an empty string (all deletions)
    }
    for (let j = 0; j <= n; j++) {
        dp[0][j] = j; // Minimum operations to convert an empty string to word2[0..j] (all insertions)
    }

    // Fill the DP table
    for (let i = 1; i <= m; i++) {
        for (let j = 1; j <= n; j++) {
            if (word1[i - 1] === word2[j - 1]) {
                dp[i][j] = dp[i - 1][j - 1]; // Characters match, no new operation needed
            } else {
                dp[i][j] = Math.min(
                    dp[i - 1][j],     // Delete a character from word1
                    dp[i][j - 1],     // Insert a character into word1
                    dp[i - 1][j - 1]  // Replace a character in word1
                ) + 1;
            }
        }
    }

    // The result is stored in dp[m][n]
    return dp[m][n];
};

####################################################
